#!/usr/bin/env bash

###
function getfile() {
    if [ -z "$2" ]; then
        wget -nv $@
    else
        outputfile="$1" && shift
        fileurl="$2" && shift
        wget -nv -O "${outputfile}" $fileurl $@
        return $?
    fi
}

### prints a newline character
function newline() {
    printf "\n"
}

### reads a default using the defaults utility
function defread() {
    # $1 = domain, $2 = key
    defaults read $1 $2
}

function pubpem() {
    # $> pubpem keyfile.pem
    openssl rsa -pubout -outform pem -in $@
}

function pubssh() {
    # http://stackoverflow.com/questions/192249/how-do-i-parse-command-line-arguments-in-bash
    local HELPTEXT="usage of pubssh:"
    HELPTEXT="$HELPTEXT\n    pubssh keyfile [outputfile [comment]]"
    pushd ~/.ssh > /dev/null

    if [ ! -z "$1" ]; then
        if [ "--help" = "$1" ]; then
            echo -e "$HELPTEXT";
        else
            local PUBKEY=$(ssh-keygen -y -f $1);
            if [ ! -z "$2" ]; then
                printf "%s" "$PUBKEY" > $2;
                if [ ! -z "$3" ]; then
                    printf " %s\n" "$3" >> $2;
                    PUBKEY="$PUBKEY $3"
                fi
                echo "### showing contents of ~/.ssh/$2 ###"
                sudo cat $2
                echo ""
            else
                echo $PUBKEY
                echo -e "\nnothing written to file."
            fi
        fi
    else
        echo -e "$HELPTEXT";
    fi

    popd > /dev/null
}

function lsgrep() { ls $2 | grep $1; }

function cdls() { cd "$@" && ls; }

function gpip() { PIP_REQUIRE_VIRTUALENV="" pip "$@"; }
