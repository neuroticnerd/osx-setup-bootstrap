#!/usr/bin/env bash

# TODO:
# install sublime snippets for bash/python scripts
# add root and user folder to finder favorites
# set noscript whitelist
# whitelist pocket things (about:pocket_signin, about:pocket_saved)
# set wallpaper
# symlink with dropbox
# setup terminal preferences (color scheme, font size, autoclose ended processes)
# set keyboard swap keys for usb keyboard
# cron job for updating brew packages and python packages
# enable bash autocompletion for git/etc
# set terminal and sourcetree preferences
# set google as default search engine in firefox
# add git configuration
# rename to osxsetup


set -e
LOGFILE="/tmp/osxbootstrap.log"

GHURL="https://raw.githubusercontent.com/neuroticnerd/osx-setup-bootstrap/master"
function ghget() {
    wget -O $1 $GHURL/$2 >> $LOGFILE 2>&1
    return $?
}

# ANSI colors you can use
black='\033[0;30m'
white='\033[0;37m'
red='\033[0;31m'
green='\033[0;32m'
yellow='\033[0;33m'
blue='\033[0;34m'
magenta='\033[0;35m'
cyan='\033[0;36m'
reset=$(tput sgr0)

### confirmation function
function confirm() {
    #read -r -p "Are you sure? [y/N] " response
    #case $response in
    #    [yY][eE][sS]|[yY])
    #        do_something
    #        ;;
    #    *)
    #        do_something_else
    #        ;;
    #esac
    # $1 variable to store the boolean result in
    # $2 (optional) message to display
    local __globalvarname="$1"
    shift
    if [ -z "$1" ]; then
        local __message="Are you sure? [y/N] "
    else
        local __message="$1 "
    fi
    local __confirmresponse
    read -r -p "$__message" __confirmresponse
    if [[ $__confirmresponse =~ ^([yY][eE][sS]|[yY])$ ]]
    then
        eval $__globalvarname=true
    else
        eval $__globalvarname=false
    fi
}

# set colored text to global var
ctext() {
    local  __globalvarname="$3"
    local  ctextresult="${1}${2}${reset}"
    eval $__globalvarname="'$ctextresult'"
    return
}

# extended echo
ECHO_PREFIX=""
ECHO_PREFIX_COLOR=$green
function xecho() {
    ctext $ECHO_PREFIX_COLOR "[${ECHO_PREFIX}]" prefix
    if [ -z "$2" ]; then
        message="$1"
    else
        ctext $1 $2 message
    fi
    echo -e "${prefix} ${message}"
}

ECHO_PREFIX="bootstrap"
ctext $blue "\n###############################################################################\n" bootstrap_lbreak
echo -e "${bootstrap_lbreak}"
xecho "setting up OS X..."
sudo -v -p "Some commands may require sudo access, please enter your password: "

###############################################################################
# Initial Setup                                                               #
###############################################################################

### make sure xcode command line utilities are installed
function ensure_xcode_tools() {
    ECHO_PREFIX="xcode"
    if ! xcode-select -p &> /dev/null; then
        xecho "installing xcode command line utilities..."
        touch /tmp/.com.apple.dt.CommandLineTools.installondemand.in-progress;
        PROD=$(softwareupdate -l |
          grep "\*.*Command Line" |
          head -n 1 | awk -F"*" '{print $2}' |
          sed -e 's/^ *//' |
          tr -d '\n')
        softwareupdate -i "$PROD" -v;
    else
        xecho "xcode command line utilities already installed."
    fi
    printf "\n"
}

### set user account icon
function user_account_icon() {
    ghget /tmp/Maru.tif static/boxcat.tif
    sudo cp -p /tmp/Maru.tif "/Library/User Pictures/Animals/Maru.tif"
    sudo chown root "/Library/User Pictures/Animals/Maru.tif"
    sudo dscl . delete /Users/$USER jpegphoto
    sudo dscl . delete /Users/$USER Picture
    sudo dscl . create /Users/$USER Picture "/Library/User Pictures/Animals/Maru.tif"
    # This forces the system to rebuild the system caches + local directory cache
    #kextcache -system-caches
}

ensure_xcode_tools
user_account_icon


###############################################################################
# Dotfiles                                                                    #
###############################################################################

function dldotfile() {
    # $1 = local location
    # $2 = remote relative location
    if ghget "$1" $2; then
        xecho "deployed $1"
    else
        xecho "ERROR: could not obtain $2"
        exit 1
    fi
}

### install bash profile and functions
function deploy_dotfiles() {
    ECHO_PREFIX="dotfiles"
    xecho "deploying dotfiles..."
    dldotfile ~/.functions dotfiles/.functions
    dldotfile ~/.bash_profile dotfiles/.bash_profile
    source ~/.bash_profile
    xecho "done."
    newline
}

deploy_dotfiles


###############################################################################
# Homebrew Setup                                                              #
###############################################################################
### link apps to normal app location + easier to access caskroom
export HOMEBREW_CASK_OPTS="--appdir=/Applications --caskroom=/opt/brew-cask"

### install/upgrade homebrew
function brew_install_upgrade() {
    ECHO_PREFIX="brew"
    if ! brew help &> /dev/null; then
        xecho "installing homebrew..."
        ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
        brew doctor
    else
        xecho "updating homebrew..."
        brew update && brew upgrade
    fi
    newline
}

### install necessary taps
function brew_taps() {
    ECHO_PREFIX="brew"
    xecho "opening brew taps..."
    brew tap homebrew/science
    brew tap caskroom/cask
    brew tap caskroom/versions
    brew tap caskroom/fonts
    newline
}

### install tuntap via cask to avoid Yosemite errors about kext signing
function brew_tuntap() {
    ECHO_PREFIX="brew"
    xecho "install tuntap now via cask to avoid Yosemite signing errors..."
    brew install brew-cask
    brew cask install tuntap
    newline
}

### install utilities
function brew_install_utils() {
    ECHO_PREFIX="brew"
    xecho "installing utilities..."
    brews=(
        opencv3
        openvpn
        bash
        wget
        ack
        aspell
        ffind
        autoenv
        coreutils
        findutils
        ffmpeg
        imagemagick
        iftop
        node
        trash
        brew-cask
        python
        dnsmasq
        autossh
        dos2unix
        netcat6
        gnu-sed
        gnu-tar
        gawk
    );
    brew install ${brews[@]}
    newline
}

### install main software
function brew_install_apps() {
    ECHO_PREFIX="brew"
    xecho "installing core software..."
    applications=(
        firefox
        google-chrome
        google-drive
        google-hangouts
        lastpass
        1password
        virtualbox
        vagrant
        sublime-text3
        smartgit
        sourcetree
        kdiff3
        slack
        hipchat
        dropbox
        cog
        vlc
        the-unarchiver
        alfred
        gimp
        xquartz
        x2goclient
        transmit
        java
        eclipse-java
        clamxav
        evernote
        spotify
        spotify-notifications
        iterm2
        gpgtools
        flash
        flash-player
        mumble
        gfxcardstatus
        charles
        easyfind
        netspot
        little-snitch
        clementine
        dash
    );
    brew cask install ${applications[@]}
    brew cask cleanup
    newline
}

### cleanup and display brew doctor output
function brew_cleanup() {
    ECHO_PREFIX="brew"
    xecho "cleaning up..."
    brew upgrade
    brew cleanup --force
    brew doctor
    newline
}

### do the brew things
brew_install_upgrade
brew_taps
brew_tuntap
brew_install_utils
brew_install_apps
brew_cleanup


###############################################################################
# Python Environment Setup                                                    #
###############################################################################

function install_global_python_packages() {
    ECHO_PREFIX="python"
    xecho "setting up global python environment..."
    pypackages=(
        pip
        setuptools
        wheel
        virtualenv
        virtualenvwrapper
        requests
        sqlalchemy
        markdown
        beautifulsoup4
        lxml
        Pillow
        Jinja2
        Pygments
        ansible
        pyopenssl
        ndg-httpsclient
        pyasn1
        supervisor
    );
    gpip install --upgrade ${pypackages[@]}
    newline
}

install_global_python_packages


###############################################################################
# Firefox Configuration                                                       #
###############################################################################

function ffinstall() {
    ### install a firefox extension based on mozilla id
    ### get the addon identifier
    ADDONID="$1"
    if [ "$ADDONID" == "" ]; then
        xecho "ERROR: You must supply an identifier parameter!"
        return 1
    fi
    shift
    FFDIR="${HOME}/Library/Application Support/Firefox"
    PROFILE="$2"
    TMPDIR="/tmp/ffaddons"
    ADDONDIR="$TMPDIR/$ADDONID"
    ADDONURL="https://addons.mozilla.org/firefox/downloads/latest/$ADDONID/addon-$ADDONID-latest.xpi"
    xecho "getting extension info for $ADDONID..."

    ### determine the profile directory
    if [ "$PROFILE" == "" ]; then
        PROFILEDIR=$(cat "${FFDIR}/profiles.ini" | sed -n -e 's/^.*Path=//p' | head -n 1)
        EXTENTIONS="${FFDIR}/${PROFILEDIR}/extensions"
        if [ -z "$PROFILEDIR" ]; then
            open -a firefox -CreateProfile default_profile
            xecho $PROFILEDIR
            xecho "Cannot find Firefox profile directory"
            return 1
        fi
    fi
    #xecho "profile = ${FFDIR}/${PROFILEDIR}"

    ### clean up potential old addon directory
    rm -rf $ADDONDIR
    mkdir -p $ADDONDIR

    ### download and unpack addon xpi then get hash id
    pushd $ADDONDIR > /dev/null
    wget -O extension.xpi $ADDONURL &> /dev/null
    unzip extension.xpi &> /dev/null
    rm extension.xpi
    AONAME=$(grep -m 1 -e em:name install.rdf || grep -m 1 -e name install.rdf)
    AONAME=${AONAME#*\>}
    AONAME=${AONAME%<*}
    FFHASH=$(grep -m 1 -e em:id install.rdf || grep -m 1 -e id install.rdf)
    FFHASH=${FFHASH#*\>}
    FFHASH=${FFHASH%<*}
    popd > /dev/null

    ### create firefox addon dir if needed and move new addons
    xecho "installing $AONAME $FFHASH..."
    mkdir -p "$EXTENTIONS"
    if [ -d "$EXTENTIONS/$FFHASH" ]; then
        xecho "addon $AONAME is already installed."
    else
        mv "$ADDONDIR" "$EXTENTIONS/$FFHASH"
        xecho "addon $AONAME installed."
    fi

    ### deploy user preferences file
    USERPREFSFILE="${FFDIR}/${PROFILEDIR}/user.js"
    USERPREFSBACKUP="${FFDIR}/${PROFILEDIR}/user.js.original"
    if ! [ -f "$USERPREFSBACKUP" ]; then
        if [ -f "$USERPREFSFILE" ]; then
            xecho "backing up current user preferences..."
            cp -p "$USERPREFSFILE" "$USERPREFSBACKUP"
        else
            xecho "no current prefs file found..."
        fi
    fi
    xecho "deploying user preferences..."

    return 0
}

function firefox_extensions() {
    ECHO_PREFIX="firefox:extensions"
    ffinstall 607454  # uBlock Origin
    ffinstall 722  # NoScript
    ffinstall 8542  # LastPass
    ffinstall 1843  # FireBug
    ffinstall 748  # GreaseMonkey

    #ffinstall 6623 # BetterPrivacy
    # video downloadhelper
}
ECHO_PREFIX="firefox"
xecho "configuring firefox..."
firefox_extensions
newline


###############################################################################
# Configure Sublime Text                                                      #
###############################################################################

ECHO_PREFIX="sublime"
STCONF="${HOME}/Library/Application Support/Sublime Text 3"
xecho "configuring sublime text..."

### enable access to the provided subl cli
xecho "ensuring subl command is available..."
if [ ! -f "/usr/local/bin/subl" ]; then
    LNSUBL="/Applications/Sublime Text.app/Contents/SharedSupport/bin/subl"
    ln -s "$LNSUBL" /usr/local/bin/subl
fi

### deploy user preferences
xecho "deploying user preferences..."
USERCONF_FILE="$STCONF/Packages/User/Preferences.sublime-settings"
CONF_URL="https://gist.githubusercontent.com/neuroticnerd/130577d9fe737fa2ab13/raw/sublime-user-settings.json"
wget -nv -O "$USERCONF_FILE" $CONF_URL

### enable package control
xecho "downloading package control..."
PKGFILE="$STCONF/Installed Packages/Package Control.sublime-package"
PKGURL="https://packagecontrol.io/Package%20Control.sublime-package"
wget -nv -O "$PKGFILE" $PKGURL

### configure sublime packages
xecho "configuring sublime packages..."
PKGCONF="$STCONF/Packages/User/Package Control.sublime-settings"
CONF_URL="$GHURL/config/sublime-packages.json"
wget -nv -O "$PKGCONF" $CONF_URL

xecho "make sublime the default plaintext program"
ST3HANDLER="{LSHandlerContentType=public.plain-text;LSHandlerRoleAll=com.sublimetext.3;}"
defaults write com.apple.LaunchServices LSHandlers -array-add "$ST3HANDLER"

newline


###############################################################################
# OS X Defaults/Preferences                                                   #
###############################################################################

ECHO_PREFIX="osx"
xecho "configuring OS X preferences and defaults..."

function configure_finder() {
    ECHO_PREFIX="osx:finder"

    xecho "show hidden files by default"
    defaults write com.apple.finder AppleShowAllFiles -bool true

    xecho "show path bar"
    defaults write com.apple.finder ShowPathbar -bool true

    xecho "always show full posix path"
    defaults write com.apple.finder _FXShowPosixPathInTitle -bool YES

    xecho "show all filename extensions"
    defaults write NSGlobalDomain AppleShowAllExtensions -bool true

    xecho "default to column view in finder windows"
    defaults write com.apple.Finder FXPreferredViewStyle clmv

    xecho "show status bar"
    defaults write com.apple.finder ShowStatusBar -bool true

    xecho "allow text selection in Quick Look"
    defaults write com.apple.finder QLEnableTextSelection -bool true

    xecho "disable the warning when changing a file extension"
    defaults write com.apple.finder FXEnableExtensionChangeWarning -bool false

    # Set Desktop as the default location for new Finder windows
    # For other paths, use `PfLo` and `file:///full/path/here/`
    xecho "default new finder windows to \${HOME}"
    defaults write com.apple.finder NewWindowTarget -string "PfHm"
    #defaults write com.apple.finder NewWindowTargetPath -string "file://${HOME}/"

    xecho "search current folder by default"
    defaults write com.apple.finder FXDefaultSearchScope -string "SCcf"

    xecho "do not create .DS_Store files on network volumes"
    defaults write com.apple.desktopservices DSDontWriteNetworkStores -bool true

    xecho "show the ~/Library folder"
    chflags nohidden ~/Library

    xecho "expanded save panel by default"
    defaults write NSGlobalDomain NSNavPanelExpandedStateForSaveMode -bool true
    defaults write NSGlobalDomain NSNavPanelExpandedStateForSaveMode2 -bool true

    xecho "expanded print panel by default"
    defaults write NSGlobalDomain PMPrintingExpandedStateForPrint -bool true
    defaults write NSGlobalDomain PMPrintingExpandedStateForPrint2 -bool true

    xecho "expand general, open with, and sharing panes by default"
    defaults write com.apple.finder FXInfoPanesExpanded -dict General -bool true OpenWith -bool true Privileges -bool true

    xecho "empty trash securely by default"
    defaults write com.apple.finder EmptyTrashSecurely -bool true

}

function configure_ui() {
    ECHO_PREFIX="osx:ui"

    xecho "show basic system info at login"
    sudo defaults write /Library/Preferences/com.apple.loginwindow AdminHostInfo HostName

    xecho "enable snap-to-grid for desktop"
    PLISTFILE="${HOME}/Library/Preferences/com.apple.finder.plist"
    STG_DESKTOP=":DesktopViewSettings:IconViewSettings:arrangeBy"
    STG_FK_VIEW=":FK_StandardViewSettings:IconViewSettings:arrangeBy"
    STG_STANDARD=":StandardViewSettings:IconViewSettings:arrangeBy"
    if ! /usr/libexec/PlistBuddy -c "Set $STG_DESKTOP grid" $PLISTFILE; then
        /usr/libexec/PlistBuddy -c "Add $STG_DESKTOP string grid" $PLISTFILE
    fi
    if ! /usr/libexec/PlistBuddy -c "Set $STG_FK_VIEW grid" $PLISTFILE; then
        /usr/libexec/PlistBuddy -c "Add $STG_FK_VIEW string grid" $PLISTFILE
    fi
    if ! /usr/libexec/PlistBuddy -c "Set $STG_STANDARD grid" $PLISTFILE; then
        /usr/libexec/PlistBuddy -c "Add $STG_STANDARD string grid" $PLISTFILE
    fi

    xecho "show percentage on battery"
    defaults write com.apple.menuextra.battery ShowPercent -string "YES"

    xecho "show volume in menu bar"
    menubaritems=(
        "/System/Library/CoreServices/Menu Extras/AirPort.menu"
        "/System/Library/CoreServices/Menu Extras/Battery.menu"
        "/System/Library/CoreServices/Menu Extras/Clock.menu"
        "/System/Library/CoreServices/Menu Extras/Volume.menu"
    );
    defaults write com.apple.systemuiserver menuExtras -array ${menubaritems[@]}

    xecho "disable the “Are you sure you want to open this application?” dialog"
    defaults write com.apple.LaunchServices LSQuarantine -bool false

    xecho "require password immediately after sleep/screen saver begins"
    defaults write com.apple.screensaver askForPassword -int 1
    defaults write com.apple.screensaver askForPasswordDelay -int 0

    xecho "enable subpixel font rendering on non-Apple LCDs"
    defaults write NSGlobalDomain AppleFontSmoothing -int 2
}

function configure_input() {
    ECHO_PREFIX="osx:input"
    APPLETPAD="com.apple.AppleMultitouchTrackpad"
    DRIVERTPAD="com.apple.driver.AppleBluetoothMultitouch.trackpad"

    xecho "set tracking speed of mouse"
    defaults write -g com.apple.mouse.scaling 2.4

    xecho "tracking mouse follow off in terminal"
    defaults write com.apple.terminal FocusFollowsMouse -string false

    xecho "enable tap-to-click for this user and login screen"
    defaults write $APPLETPAD Clicking -bool true
    defaults write $DRIVERTPAD Clicking -bool true
    defaults write NSGlobalDomain com.apple.mouse.tapBehavior -int 1
    defaults -currentHost write NSGlobalDomain com.apple.mouse.tapBehavior -int 1

    xecho "trackpad right-click settings"
    defaults write $APPLETPAD TrackpadRightClick -bool true
    defaults write $APPLETPAD TrackpadCornerSecondaryClick -int 2
    defaults write $DRIVERTPAD TrackpadRightClick -bool true
    defaults write $DRIVERTPAD TrackpadCornerSecondaryClick -int 2
    #defaults -currentHost write NSGlobalDomain com.apple.trackpad.trackpadCornerClickBehavior -int 1
    #defaults -currentHost write NSGlobalDomain com.apple.trackpad.enableSecondaryClick -bool true

    xecho "disable unnatural 'natural' scrolling"
    defaults write NSGlobalDomain com.apple.swipescrolldirection -bool false

    xecho "always show scroll bars"
    defaults write NSGlobalDomain AppleShowScrollBars -string “Always”

    xecho "disable smart quotes and smart dashes"
    defaults write NSGlobalDomain NSAutomaticQuoteSubstitutionEnabled -bool false
    defaults write NSGlobalDomain NSAutomaticDashSubstitutionEnabled -bool false

    xecho "disable annoying auto-correct behavior"
    defaults write NSGlobalDomain NSAutomaticSpellingCorrectionEnabled -bool false

    xecho "enable full keyboard access for all controls"
    defaults write NSGlobalDomain AppleKeyboardUIMode -int 3
}

function configure_screenshots() {
    ECHO_PREFIX="osx:screenshots"

    xecho "set screenshot format"
    defaults write com.apple.screencapture type -string "png"

    xecho "change screenshot save location"
    defaults write com.apple.screencapture location ~/screenshots

    xecho "disable screenshot shadows"
    defaults write com.apple.screencapture disable-shadow -bool true
}

function dockadd() {
    appstring="<dict><key>tile-data</key><dict><key>file-data</key><dict><key>_CFURLString</key><string>$1</string><key>_CFURLStringType</key><integer>0</integer></dict></dict></dict>"
    defaults write com.apple.dock 'persistent-apps' -array-add "$appstring"
    xecho "added $1"
}
function othersadd() {
    appstring="<dict><key>tile-data</key><dict><key>file-data</key><dict><key>_CFURLString</key><string>$1</string><key>_CFURLStringType</key><integer>0</integer></dict></dict></dict>"
    defaults write com.apple.dock 'persistent-others' -array-add "$appstring"
    xecho "added $1"
}
function configure_dock() {
    ECHO_PREFIX="osx:dock"

    xecho "remove default dock icons"
    defaults write com.apple.dock 'persistent-apps' -array ""
    defaults write com.apple.dock 'persistent-others' -array ""
    # http://hints.macworld.com/article.php?story=20040819170450489
    #defaults write com.apple.dock 'checked-for-launchpad' -bool true

    xecho "adding custom dock icon set..."
    dockadd "/Applications/Launchpad.app/"
    dockadd "/Applications/Firefox.app/"
    dockadd "/Applications/Sublime Text.app/"
    dockadd "/Applications/SourceTree.app/"
    dockadd "/Applications/SmartGit.app/"
    dockadd "/Applications/Slack.app/"
    dockadd "/Applications/HipChat.app/"
    dockadd "/Applications/iTerm.app/"
    dockadd "/Applications/Utilities/Terminal.app/"
    dockadd "/Applications/VLC.app/"
    dockadd "/Applications/x2goclient.app/"
    dockadd "/Applications/Calculator.app/"
    dockadd "/Applications/System Preferences.app/"
    dockadd "/Applications/Utilities/Activity Monitor.app/"
    dockadd "/Applications/1Password 5.app/"

    xecho "add a spacer to the left side of the Dock (where the applications are)"
    defaults write com.apple.dock 'persistent-apps' -array-add '{tile-data={}; tile-type="spacer-tile";}'

    xecho "add a spacer to the right side of the Dock (where the Trash is)"
    defaults write com.apple.dock 'persistent-others' -array-add '{tile-data={}; tile-type="spacer-tile";}'

    othersadd "${HOME}/Dropbox"
    othersadd "${HOME}/Downloads"

    xecho "disable dock magnification"
    defaults write com.apple.dock 'magnification' -bool false

    xecho "remove auto-hide delay on the dock"
    defaults write com.apple.dock 'autohide-delay' -float 0

    xecho "remove the animation when hiding/showing the Dock"
    defaults write com.apple.dock 'autohide-time-modifier' -float 0

    xecho "automatically hide and show the Dock"
    defaults write com.apple.dock 'autohide' -bool true

    xecho "set the icon size of Dock items"
    defaults write com.apple.dock tilesize -int 46

    xecho "show indicator lights for open applications in the Dock"
    defaults write com.apple.dock show-process-indicators -bool true
}

function configure_hot_corners() {
    ECHO_PREFIX="osx:hot_corners"
    ### hot corners
    # possible values:
    #  0: no-op
    #  2: Mission Control
    #  3: Show application windows
    #  4: Desktop
    #  5: Start screen saver
    #  6: Disable screen saver
    #  7: Dashboard
    # 10: Put display to sleep
    # 11: Launchpad
    # 12: Notification Center

    xecho "set bottom right screen corner --> desktop"
    defaults write com.apple.dock wvous-bl-corner -int 4
    defaults write com.apple.dock wvous-bl-modifier -int 0

    xecho "set top right screen corner --> screen saver"
    defaults write com.apple.dock wvous-tr-corner -int 5
    defaults write com.apple.dock wvous-tr-modifier -int 0
}

function configure_activity_monitor() {
    ECHO_PREFIX="osx:activity_monitor"

    xecho "show the main window when launching Activity Monitor"
    defaults write com.apple.ActivityMonitor OpenMainWindow -bool true

    xecho "visualize CPU usage in the Activity Monitor Dock icon"
    defaults write com.apple.ActivityMonitor IconType -int 5

    xecho "show all processes in Activity Monitor"
    defaults write com.apple.ActivityMonitor ShowCategory -int 0  # 100?

    xecho "sort Activity Monitor results by CPU usage"
    defaults write com.apple.ActivityMonitor SortColumn -string “CPUUsage”
    defaults write com.apple.ActivityMonitor SortDirection -int 0

    xecho "set updates to be more frequent"
    defaults write com.apple.ActivityMonitor UpdatePeriod -int 1
}


function CFPreferencesAppSynchronize() {
    python - <<END
from Foundation import CFPreferencesAppSynchronize
CFPreferencesAppSynchronize('$1')
END
}
function configure_terminal() {

    # ----------------------------------------------
    # Copy the Basic profile to "Basic Improved"
    # ----------------------------------------------
    pathToTerminalPrefs="${HOME}/Library/Preferences/com.apple.Terminal.plist"
    /usr/libexec/PlistBuddy -c "Copy :Window\ Settings:Basic :Window\ Settings:Basic\ Improved" ${pathToTerminalPrefs}
    /usr/libexec/PlistBuddy -c "Set :Window\ Settings:Basic\ Improved:name Basic\ Improved" ${pathToTerminalPrefs}

    # ----------------------------------------------
    # Modify the "Basic Improved" profile
    # ----------------------------------------------

    # Close if the shell exited cleanly
    /usr/libexec/PlistBuddy -c "Add :Window\ Settings:Basic\ Improved:shellExitAction integer 1" ${pathToTerminalPrefs}

    # Make the window a bit larger
    /usr/libexec/PlistBuddy -c "Add :Window\ Settings:Basic\ Improved:columnCount integer 120" ${pathToTerminalPrefs}
    /usr/libexec/PlistBuddy -c "Add :Window\ Settings:Basic\ Improved:rowCount integer 70" ${pathToTerminalPrefs}

    # ----------------------------------------------
    # Modify Terminal preferences
    # ----------------------------------------------

    # Shell opens with: /bin/bash
    defaults write com.apple.Terminal Shell -string "/bin/bash"

    # Set the "Basic Improved" as the default
    defaults write com.apple.Terminal "Startup Window Settings" -string "Basic Improved"
    defaults write com.apple.Terminal "Default Window Settings" -string "Basic Improved"

    CFPreferencesAppSynchronize "com.apple.Terminal"


    # terminal and iterm2
    # Only use UTF-8 in Terminal.app
    defaults write com.apple.terminal StringEncodings -array 4
    # Use a modified version of the Solarized Dark theme by default in Terminal.app
    TERM_PROFILE=’Solarized Dark xterm-256color’;
    CURRENT_PROFILE=”$(defaults read com.apple.terminal ‘Default Window Settings’)”;
    if [ “${CURRENT_PROFILE}” != “${TERM_PROFILE}” ]; then
    open “${HOME}/init/${TERM_PROFILE}.terminal”;
    sleep 1; # Wait a bit to make sure the theme is loaded
    defaults write com.apple.terminal ‘Default Window Settings’ -string “${TERM_PROFILE}”;
    defaults write com.apple.terminal ‘Startup Window Settings’ -string “${TERM_PROFILE}”;
    fi;
    # Enable “focus follows mouse” for Terminal.app and all X11 apps
    # i.e. hover over a window and start typing in it without clicking first
    #defaults write com.apple.terminal FocusFollowsMouse -bool true
    #defaults write org.x.X11 wm_ffm -bool true
    # Install the Solarized Dark theme for iTerm
    open “${HOME}/init/Solarized Dark.itermcolors”
    # Don’t display the annoying prompt when quitting iTerm
    defaults write com.googlecode.iterm2 PromptOnQuit -bool false
}

function configure_misc() {
    ECHO_PREFIX="osx:general"
    xecho "check for software updates daily"
    defaults write com.apple.SoftwareUpdate ScheduleFrequency -int 1

    xecho "minimize window with double-click in title bar"
    defaults write NSGlobalDomain AppleMiniaturizeOnDoubleClick -bool true

    #xecho "enable HiDPI display modes (requires restart)"
    #sudo defaults write /Library/Preferences/com.apple.windowserver DisplayResolutionEnabled -bool true

    xecho "show mirroring options in the menu bar when available"
    defaults write com.apple.airplay showInMenuBarIfPresent -bool true

    # Set a custom wallpaper image. `DefaultDesktop.jpg` is already a symlink, and
    # all wallpapers are in `/Library/Desktop Pictures/`. The default is `Wave.jpg`.
    #rm -rf ~/Library/Application Support/Dock/desktoppicture.db
    #sudo rm -rf /System/Library/CoreServices/DefaultDesktop.jpg
    #sudo ln -s /path/to/your/image /System/Library/CoreServices/DefaultDesktop.jpg
    #sqlite3 "~/Library/Application\ Support/Dock/desktoppicture.db" "update data set value = '/path/to/any/picture.png'";
    #killall Dock;
}

configure_finder
configure_ui
configure_input
configure_screenshots
configure_dock
configure_hot_corners
configure_activity_monitor
#configure_terminal
configure_misc


ECHO_PREFIX="osx"
xecho "flushing preference cache, Dock, and Finder..."
killall cfprefsd
killall -KILL Finder
killall -KILL Dock


###############################################################################
# Finished.                                                                   #
###############################################################################
ECHO_PREFIX="bootstrap"
xecho "done. Please restart for all changes to take effect!"
#sudo shutdown -r now
echo -e "${bootstrap_lbreak}"
exit 0





# ==============================================
# Kill affected applications
# ==============================================

function killallApps() {
    killall "Finder" > /dev/null 2>&1
    killall "SystemUIServer" > /dev/null 2>&1
    killall "Dock" > /dev/null 2>&1

    appsToKill=(
    "Activity Monitor"
    "BBEdit"
    "Calendar"
    "Contacts"
    "Dashboard"
    "Disk Utility"
    "Safari"
    "System Preferences"
    "TextWrangler"
    "Xcode"
    )

    for app in "${appsToKill[@]}"
    do
        killall "${app}" > /dev/null 2>&1
        if [[ $? -eq 0 ]]; then
            # We just killed an app so restart it
            open -a "${app}"
        fi
    done

    echo "Note that some of these changes require a logout/restart to take effect."
}

printf "Restart the affected applications? (y/n): "
read killallReply
if [[ $killallReply =~ ^[Yy]$ ]]; then
    killallApps
fi

exit 0
