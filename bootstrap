#!/usr/bin/env bash

set -e
LOGFILE="/tmp/osxbootstrap.log"
GHURL="https://raw.githubusercontent.com/neuroticnerd/osx-setup-bootstrap/master"
function ghget() {
    wget -O $1 $GHURL/$2 >> $LOGFILE 2>&1
    return $?
}

sudo -v -p "Some commands may require sudo access, please enter your password:"
echo "[init] running osx bootstrap script" > $LOGFILE
echo "[bootstrap] setting up OS X..."

###############################################################################
# Initial Setup                                                               #
###############################################################################

### make sure xcode utilities are installed
if ! xcode-select -p &> /dev/null; then
    echo "[xcode] installing xcode command line utilities..."
    touch /tmp/.com.apple.dt.CommandLineTools.installondemand.in-progress;
    PROD=$(softwareupdate -l |
      grep "\*.*Command Line" |
      head -n 1 | awk -F"*" '{print $2}' |
      sed -e 's/^ *//' |
      tr -d '\n')
    softwareupdate -i "$PROD" -v;
else
    echo "[xcode] xcode command line utilities already installed."
fi
printf "\n"


###############################################################################
# Dotfiles                                                                    #
###############################################################################

### install bash profile and functions
echo "[dotfiles] deploying dotfiles..."
function dldotfile() {
    # $1 = local location
    # $2 = remote relative location
    if ghget "$1" $2; then
        echo "[dotfiles] deployed $1"
    else
        echo "[dotfiles] ERROR: could not obtain $2"
        exit 1
    fi
}
dldotfile ~/.functions dotfiles/.functions
dldotfile ~/.bash_profile dotfiles/.bash_profile
source ~/.bash_profile
echo "[dotfiles] done."
newline


###############################################################################
# Homebrew Setup                                                              #
###############################################################################

### install/update homebrew
if ! brew help &> /dev/null; then
    echo "[brew] installing homebrew..."
    ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
    brew doctor
else
    echo "[brew] updating homebrew..."
    brew update && brew upgrade
fi
newline

### install necessary taps
echo "[brew] opening brew taps..."
brew tap homebrew/science
brew tap caskroom/cask
brew tap caskroom/versions
brew tap caskroom/fonts
newline

### install utilities
echo "[brew] installing utilities..."
brews=(
    opencv3
    bash
    wget
    ack
    ffind
    autoenv
    coreutils
    findutils
    ffmpeg
    node
    trash
    brew-cask
    python
)
brew install ${brews[@]}
newline

### install main software
echo "[brew] installing core software..."
applications=(
    firefox
    google-chrome
    google-drive
    google-hangouts
    lastpass
    1password
    virtualbox
    vagrant
    sublime-text3
    smartgit
    sourcetree
    kdiff3
    slack
    hipchat
    dropbox
    cog
    vlc
    the-unarchiver
    alfred
    gimp
    xquartz
    x2goclient
    transmit
    java
    eclipse-java
    clamxav
    evernote
    spotify
    spotify-notifications
    iterm2
    gpgtools
    flash
    flash-player
    #pycharm
    #charles
    #easyfind
)
brew cask install ${applications[@]}
brew cask cleanup
newline

### cleanup and display brew doctor output
brew cleanup --force
brew doctor
newline


###############################################################################
# Python Environment Setup                                                    #
###############################################################################

echo "[python] setting up global python environment..."
gpip install --upgrade pip setuptools wheel
gpip install --upgrade virtualenv virtualenvwrapper
gpip install --upgrade requests sqlalchemy
gpip install --upgrade markdown beautifulsoup4 lxml
gpip install --upgrade Pillow Jinja2 Pygments
newline


###############################################################################
# Firefox Configuration                                                       #
###############################################################################

echo "[firefox] configuring firefox..."

### install adblock plus extension
ffinstall 1865

### install noscript extension
ffinstall 722

### install lastpass extension
ffinstall 8542


###############################################################################
# Configure Sublime Text                                                      #
###############################################################################

echo "[sublime] configuring sublime text..."
STCONF="${HOME}/Library/Application Support/Sublime Text 3"

### enable access to the provided subl cli
echo "[sublime] ensuring subl command is available..."
if [ ! -f "/usr/local/bin/subl" ]; then
    LNSUBL="/Applications/Sublime Text.app/Contents/SharedSupport/bin/subl"
    ln -s "$LNSUBL" /usr/local/bin/subl
fi
newline

### deploy user preferences
echo "[sublime] deploying user preferences..."
USERCONF_FILE="$STCONF/Packages/User/Preferences.sublime-settings"
CONF_URL="https://gist.githubusercontent.com/neuroticnerd/130577d9fe737fa2ab13/raw/sublime-user-settings.json"
wget -nv -O "$USERCONF_FILE" $CONF_URL
newline

### enable package control
echo "[sublime] downloading package control..."
PKGFILE="$STCONF/Installed Packages/Package Control.sublime-package"
PKGURL="https://packagecontrol.io/Package%20Control.sublime-package"
wget -nv -O "$PKGFILE" $PKGURL
newline

### configure sublime packages
echo "[sublime] configuring sublime packages..."
PKGCONF="$STCONF/Packages/User/Package Control.sublime-settings"
CONF_URL="$GHURL/config/sublime-packages.json"
wget -nv -O "$PKGCONF" $CONF_URL
newline


###############################################################################
# OS X Defaults/Preferences                                                   #
###############################################################################
echo "[osx] configuring OS X preferences and defaults..."

echo "[osx:finder] show hidden files by default"
defaults write com.apple.finder AppleShowAllFiles -bool true

echo "[osx:finder] always show full posix path"
defaults write com.apple.finder _FXShowPosixPathInTitle -bool YES

echo "[osx:finder] show all filename extensions"
defaults write NSGlobalDomain AppleShowAllExtensions -bool true

echo "[osx:finder] default to column view"
defaults write com.apple.Finder FXPreferredViewStyle clmv

echo "[osx:finder] show status bar"
defaults write com.apple.finder ShowStatusBar -bool true

echo "[osx:finder] allow text selection in Quick Look"
defaults write com.apple.finder QLEnableTextSelection -bool true

echo "[osx:finder] disable the warning when changing a file extension"
defaults write com.apple.finder FXEnableExtensionChangeWarning -bool false

echo "[osx:mouse] set tracking speed of mouse"
defaults write -g com.apple.mouse.scaling 2.4

echo "[osx:mouse] tracking mouse follow in terminal"
defaults write com.apple.terminal FocusFollowsMouse -string true

echo "[osx:login] show basic system info at login"
sudo defaults write /Library/Preferences/com.apple.loginwindow AdminHostInfo HostName

echo "[osx:desktop] enable snap-to-grid for desktop"
PLISTFILE="${HOME}/Library/Preferences/com.apple.finder.plist"
STG_DESKTOP=":DesktopViewSettings:IconViewSettings:arrangeBy"
STG_FK_VIEW=":FK_StandardViewSettings:IconViewSettings:arrangeBy"
STG_STANDARD=":StandardViewSettings:IconViewSettings:arrangeBy"
if ! /usr/libexec/PlistBuddy -c "Set $STG_DESKTOP grid" $PLISTFILE; then
    /usr/libexec/PlistBuddy -c "Add $STG_DESKTOP string grid" $PLISTFILE
fi
if ! /usr/libexec/PlistBuddy -c "Set $STG_FK_VIEW grid" $PLISTFILE; then
    /usr/libexec/PlistBuddy -c "Add $STG_FK_VIEW string grid" $PLISTFILE
fi
if ! /usr/libexec/PlistBuddy -c "Set $STG_STANDARD grid" $PLISTFILE; then
    /usr/libexec/PlistBuddy -c "Add $STG_STANDARD string grid" $PLISTFILE
fi

echo "[osx:trackpad] enable tap-to-click"
defaults write com.apple.driver.AppleBluetoothMultitouch.trackpad Clicking -bool true
defaults write NSGlobalDomain com.apple.mouse.tapBehavior -int 1
defaults -currentHost write NSGlobalDomain com.apple.mouse.tapBehavior -int 1

echo "[osx:trackpad] map bottom right corner to right-click"
defaults write com.apple.driver.AppleBluetoothMultitouch.trackpad TrackpadCornerSecondaryClick -int 2
defaults write com.apple.driver.AppleBluetoothMultitouch.trackpad TrackpadRightClick -bool true
defaults -currentHost write NSGlobalDomain com.apple.trackpad.trackpadCornerClickBehavior -int 1
defaults -currentHost write NSGlobalDomain com.apple.trackpad.enableSecondaryClick -bool true

echo "[osx:scrolling] disable unnatural 'natural' scrolling"
defaults write NSGlobalDomain com.apple.swipescrolldirection -bool false

echo "[osx:scrolling] always show scroll bars"
defaults write NSGlobalDomain AppleShowScrollBars -string “Always”

echo "[osx:menubar] show percentage on battery"
defaults write com.apple.menuextra.battery ShowPercent -string "YES"

echo "[osx:menubar] show volume in menu bar"
defaults write com.apple.systemuiserver menuExtras -array "/System/Library/CoreServices/Menu Extras/Bluetooth.menu" "/System/Library/CoreServices/Menu Extras/AirPort.menu" "/System/Library/CoreServices/Menu Extras/Battery.menu" "/System/Library/CoreServices/Menu Extras/Clock.menu"

echo "[osx:systemui] expanded save panel by default"
defaults write NSGlobalDomain NSNavPanelExpandedStateForSaveMode -bool true
defaults write NSGlobalDomain NSNavPanelExpandedStateForSaveMode2 -bool true

echo "[osx:systemui] expanded print panel by default"
defaults write NSGlobalDomain PMPrintingExpandedStateForPrint -bool true
defaults write NSGlobalDomain PMPrintingExpandedStateForPrint2 -bool true

echo "[osx:systemui] disable the “Are you sure you want to open this application?” dialog"
defaults write com.apple.LaunchServices LSQuarantine -bool false

echo "[osx:systemui] enable full keyboard access for all controls"
defaults write NSGlobalDomain AppleKeyboardUIMode -int 3

echo "[osx:updates] check for software updates daily"
defaults write com.apple.SoftwareUpdate ScheduleFrequency -int 1

echo "[osx:input] disable smart quotes and smart dashes"
defaults write NSGlobalDomain NSAutomaticQuoteSubstitutionEnabled -bool false
defaults write NSGlobalDomain NSAutomaticDashSubstitutionEnabled -bool false

echo "[osx:screen] require password immediately after sleep or screen saver begins"
defaults write com.apple.screensaver askForPassword -int 1
defaults write com.apple.screensaver askForPasswordDelay -int 0

echo "[osx:screenshots] set screenshot format"
defaults write com.apple.screencapture type -string “png”

echo "[osx:screenshots] change screenshot save location"
defaults write com.apple.screencapture location ~/screenshots

echo "[osx:screenshots] disable screenshot shadows"
defaults write com.apple.screencapture disable-shadow -bool true

### [osx:plaintext]: make sublime the default plaintext program
#defaults write com.apple.LaunchServices LSHandlers -array-add '{LSHandlerContentType=public.plain-text;LSHandlerRoleAll=com.sublimetext.3;}'

# Enable subpixel font rendering on non-Apple LCDs
#defaults write NSGlobalDomain AppleFontSmoothing -int 2
# Enable HiDPI display modes (requires restart)
#sudo defaults write /Library/Preferences/com.apple.windowserver DisplayResolutionEnabled -bool true

# Set a custom wallpaper image. `DefaultDesktop.jpg` is already a symlink, and
# all wallpapers are in `/Library/Desktop Pictures/`. The default is `Wave.jpg`.
#rm -rf ~/Library/Application Support/Dock/desktoppicture.db
#sudo rm -rf /System/Library/CoreServices/DefaultDesktop.jpg
#sudo ln -s /path/to/your/image /System/Library/CoreServices/DefaultDesktop.jpg


echo "[osx] resetting Finder..."
# reset finder
killall Finder


###############################################################################
# Finished.                                                                   #
###############################################################################
echo "[bootstrap] done. Please restart for all changes to take effect!"
#sudo shutdown -r now
